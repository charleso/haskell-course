
import Debug.Trace
import Control.Parallel (par, pseq)
import Control.Parallel.Strategies

tests = [test_p1, test_p1', test_p2, test_p3, test_p3', test_p4, test_p5, test_p6, test_p7, test_p10]

{-
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
-}

p1 = p1' 1000
p1' = sum . p1''
p1'' n = filter (mods [3, 5]) $ [1..(n - 1)]
    where mods y x = any ((0 ==) . mod x) y

test_p1 = p1' 10 == 23
test_p1' = p1'' 10 == [3, 5, 6, 9]

{-
Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
-}

p2 = p2' 4000000
p2' n = sum . filter even . takeWhile (n >=) $ fib
fib = fib' 1 2
    where fib' a b = a : b : fib'' a b
          fib'' a b = let x = a + b in x : fib'' b x
          
test_p2 = take 10 fib == [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]

{-
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
-}

p3 = p3' 600851475143
p3' = last . p3''
p3'' n = p3x n (tail . prime $ n)
    where p3x 1 a = []
          p3x _ [] = []
          p3x n' (h:t) = if m == 0 then h : p3x d t else p3x n' t
            where (d, m) = divMod n' h

prime n = prime' [1..n]
prime' = filter (\x -> not . any (\y -> x `mod` y == 0) $ [2..(x `div` 2)])
-- prime' = map (\(a, _) -> a) . filter (\(_, b) -> b) . parMap rseq (\x -> (x, not . any (\y -> x `mod` y == 0) $ [2..(x `div` 2)]))

test_p3 = p3' 13195 == 29
test_p3' = p3'' 13195 == [5, 7, 13, 29]

{-
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 99.

Find the largest palindrome made from the product of two 3-digit numbers.
-}

p4 = p4' 100 999
p4' x y = foldl max 0 combs
    where combs = [a*b | a <- nums, b <- nums, is_pal (a*b)]
          nums = [x..y]

is_pal a = let b = show a in b == reverse b

test_p4 = p4' 10 99 == 9009

{-
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
-}

p5 = p5' 20
p5' b = head p5''
    where p5'' = filter (\x -> all (\y -> x `mod` y == 0) $ [2..b]) [b, (b*2)..]

-- I didn't work this out myself :(
p5_cheat = foldl lcm 1 [1..20]

test_p5 = p5' 10 == 2520

{-
The sum of the squares of the first ten natural numbers is,

1^2 + 2^2 + ... + 10^2 = 385
The square of the sum of the first ten natural numbers is,

(1 + 2 + ... + 10)^2 = 552 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
-}

p6 = p6' 100
p6' n = s2 - s1 
    where s1 = sum . map (^ 2) $ [1..n]
          s2 = (sum [1..n]) ^ 2

test_p6 = p6' 10 == 2640

{-
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10001st prime number?
-}

p7 = p7' 10001
p7' n = (prime' $ [1..]) !! n

test_p7 = p7' 6 == 13

{-
Find the greatest product of five consecutive digits in the 1000-digit number.
-}

p8_num = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

p8 = maximum . p8' $ (show p8_num)
p8' (_:_:_:_:_:[]) = []
p8' n = p8_prod (take 5 $ n) : p8' (tail n)

p8_prod = product . map (read . (:[]))

{-
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

a^2 + b^2 = c^2
For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
-}

{-
a^2 + b^2 = c^2
a + b + c = 1000
=> c = 1000 - a - b
=> (1000 - a - b)^2 = a^2 + b^2
=> (1000 - (a + b))^2 = ...
=> 1000^2 - 2000(a + b) + (a + b)^2 = ...
=> 1000^2 - 2000a - 2000b + a^2 + 2ab + b^2 = a^2 + b^2
=> 1000^2 - 2000a - 2000b + 2ab = 0
=> 1000^2 = 2000a + 2000b - 2ab
=> 1000^2 = 2(1000a + 1000b - ab)
=> 500000 = 1000a + 1000b - ab
=> 500000 = 1000(a + b) - ab
-}

-- p9 = (200,375,425,1000)
p9 = take 1 . filter (\(a, b, c, x) -> x == 1000) $ p9' 50
p9' max = [(a, b, c, x) | a <- [1..max], b <- [1..max], c <- [1..max], a < b && b < c, a^2 + b^2 == c^2, let x = a + b + c]

p9_2 = p9_2' 500
p9_2' max = let (a, b) = head [(a, b) | a <- [1..max], b <- [1..max], a < b, 1000 * (a + b) - (a * b) == 500000]
           in (a, b, 1000 - a - b)

{-
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.
-}

p10 = p10' 2000000
p10' = sum . tail . prime 
test_p10 = p10' 10 == 17
